[getServiceRequest]
definition = rex field="description" "(?<service_request>SPK\-\d+)"
iseval = 0

[indexIsSpecified]
definition = rex field="qualifiedSearch" mode=sed "s/\`comment.+?\`//g"\
| rex field="qualifiedSearch" mode=sed "s/[\n\r]+//g" \
| rex field="qualifiedSearch" mode=sed "s/^(\s+|search\s\[\s)//g" \
| rex field="qualifiedSearch" "^(?<qualifiedSearch>.+?)(?:\n|$)" \
| rex field="qualifiedSearch" max_match=0 "\`(?<macro>.+?)(?:\((?<macro_args>.+?)\)|)\`" \
| mvexpand macro \
| rex field="macro" mode=sed "s/\\(\\)//g" \
| eval macro=if(isnotnull(macro_args),(((macro . "(") . mvcount(split(macro_args,","))) . ")"),macro) \
| join type=outer macro \
    [| rest splunk_server=local /servicesNS/-/-/admin/macros \
    | fields title definition \
    | rename title as macro] \
| rex field="qualifiedSearch" mode=sed "s/\`//g" \
| eval qualifiedSearch=if(isnotnull(definition),qualifiedSearch." ".definition,qualifiedSearch) \
| rex field="definition" "^(?:\s+|)(?<definitionCommand>.+?)(?:\s|\=|\||$)"\
| lookup search_commands_lookup command as definitionCommand OUTPUT command as definitionCommand\
| rex field="qualifiedSearch" max_match=0 "eventtype(?:\s|)\=(?:\s|)(?<eventtype>\S+?)(?:\"|\s)" \
| mvexpand eventtype \
| rex field="eventtype" mode=sed "s/\"//g" \
| rex field="qualifiedSearch" mode=sed "s/\(//g" \
| rex field="eventtype" mode=sed "s/\"//g" \
| join type=outer eventtype \
    [| rest splunk_server=local /servicesNS/-/-/saved/eventtypes \
    | fields title search \
    | rename title as eventtype search as eventtypeSearch] \
| eval qualifiedSearch=if(isnotnull(eventtypeSearch),qualifiedSearch." ".eventtypeSearch,qualifiedSearch) \
| rex field="qualifiedSearch" "^(?:\s+|)(?<command>.+?)(?:\s|\=|\||$)"\
| eval command=if(isnotnull(definitionCommand),definitionCommand,command)\
| lookup search_commands_lookup command OUTPUT classic_search \
| eval indexIsSpecified=if(classic_search=0,1,0) \
| eval indexIsSpecified=case(indexIsSpecified=0 AND like(qualifiedSearch,"%index=*%") OR like(qualifiedSearch,"%index=\"*%"),1,indexIsSpecified=0 AND (like(qualifiedSearch,"%index=%") OR like(qualifiedSearch,"%index=%")),1,true(),indexIsSpecified) \
| eval delayDoesNotApply=if((classic_search == 0),1,0) \
| eventstats max(indexIsSpecified) as indexIsSpecified by title "eai:acl.app" \
| rex field="qualifiedSearch" max_match=0 "\`(?<macro>.+?)(?:\((?<macro_args>.+?)\)|)\`" \
| mvexpand macro \
| rex field="macro" mode=sed "s/\\(\\)//g" \
| eval macro=if(isnotnull(macro_args),(((macro . "(") . mvcount(split(macro_args,","))) . ")"),macro) \
| join type=outer macro \
    [| rest splunk_server=local /servicesNS/-/-/admin/macros \
    | fields title definition \
    | rename title as macro definition as definitionAlt] \
| eval qualifiedSearch=if(isnotnull(definitionAlt),qualifiedSearch." ".definitionAlt,qualifiedSearch) \
| rex field="definitionAlt" "^(?:\s+|)(?<definitionAltCommand>.+?)(?:\s|\=|\||$)"\
| lookup search_commands_lookup command as definitionAltCommand OUTPUT command as definitionAltCommand\
| rex field="qualifiedSearch" max_match=0 "eventtype(?:\s|)\=(?:\s|)(?<eventtype>\S+?)(?:\"|\s)" \
| mvexpand eventtype \
| rex field="eventtype" mode=sed "s/\"//g" \
| rex field="qualifiedSearch" mode=sed "s/\(//g" \
| rex field="eventtype" mode=sed "s/\"//g" \
| join type=outer eventtype \
    [| rest splunk_server=local /servicesNS/-/-/saved/eventtypes \
    | fields title search \
    | rename title as eventtype search as eventtypeSearch] \
| eval qualifiedSearch=if(isnotnull(eventtypeSearch),qualifiedSearch." ".eventtypeSearch,qualifiedSearch) \
| rex field="qualifiedSearch" "^(?:\s+|)(?<command>.+?)(?:\s|\=|\||$)"\
| eval command=if(isnotnull(definitionAltCommand),definitionAltCommand,command)\
| lookup search_commands_lookup command OUTPUT classic_search\
| eval indexIsSpecified=if(classic_search=0,1,0) \
| eval indexIsSpecified=case(indexIsSpecified=0 AND like(qualifiedSearch,"%index=*%") OR like(qualifiedSearch,"%index=\"*%"),1,indexIsSpecified=0 AND (like(qualifiedSearch,"%index=%") OR like(qualifiedSearch,"%index=%")),1,true(),indexIsSpecified) \
| eval delayDoesNotApply=if((classic_search == 0),1,0) \
| eventstats max(indexIsSpecified) as indexIsSpecified min(delayDoesNotApply) as delayDoesNotApply by title "eai:acl.app" \
| fields - definition definitionAlt eventtype macro macro_args qualifiedSearch \
| stats values(*) as * by title "eai:acl.app"
iseval = 0

[maxConcurrentSavedSearches]
definition = appendcols\
    [| rest splunk_server="local" /services/server/info \
    | stats values(serverName) as host \
    | append \
        [ search earliest="-5m" index="_internal" sourcetype="splunkd" component="SHCMaster" \
        | stats values(peer) as host \
        | mvexpand host] \
    | stats dc(host) as sh_count \
    | appendcols \
        [| rest splunk_server=local /services/server/status/limits/search-concurrency \
        | fields max_hist_scheduled_searches] \
    | eval max_saved_search=max_hist_scheduled_searches*sh_count \
    | fields max_saved_search]\
| eventstats values(max_saved_search) as "max concurrent" \
| fields - max_saved_search
iseval = 0
