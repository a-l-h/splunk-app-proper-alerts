[getServiceRequest]
definition = rex field="description" "(?<service_request>SPK\-\d+)"
iseval = 0

[indexIsSpecified]
definition = rex field="qualifiedSearch" mode=sed "s/^(\\s+|search\\s\\[\\s)//g" \
| rex field="qualifiedSearch" mode=sed "s/\`comment.+?\`//g" \
| rex field="qualifiedSearch" mode=sed "s/[\n\r]+//g" \
| rex field="qualifiedSearch" "^(search\\s+|)(\\[\\||)\\`(?<macro>.+?)(\\((?<macro_args>.+?)\\)|)\\`" \
| rex field="macro" mode=sed "s/\\(\\)//g" \
| eval macro=if(isnotnull(macro_args),(((macro . "(") . mvcount(split(macro_args,","))) . ")"),macro) \
| join type=outer macro\
    [| rest splunk_server=local /servicesNS/-/-/admin/macros \
    | fields + title, definition \
    | rename title as macro] \
| eval macro=if((definition == "()"),null,definition) \
| eval qualifiedSearch=if(isnotnull(macro),definition,qualifiedSearch) \
| rex field="qualifiedSearch" "^(search\\s+|)eventtype\\=(?<eventtype>.+?)\\s" \
| rex field="qualifiedSearch" mode=sed "s/\(//g" \
| rex field="eventtype" mode=sed "s/\"//g" \
| join type=outer eventtype\
    [| rest splunk_server=local /servicesNS/-/-/saved/eventtypes \
    | fields + title, search \
    | rename title as eventtype] \
| eval qualifiedSearch=if(isnotnull(eventtype),search,qualifiedSearch) \
| rex field="qualifiedSearch" "^(?:\s+|)(?<command>.+?)(?:\s|\=|\||$)"\
| lookup search_commands_lookup command OUTPUT classic_search\
| eval indexIsSpecified=if(classic_search=0,1,0)\
| eval indexIsSpecified=case(indexIsSpecified=0 AND like(qualifiedSearch,"search index=*%") OR like(qualifiedSearch,"search index=\"*%"),1,indexIsSpecified=0 AND (like(qualifiedSearch,"search index=%") OR like(qualifiedSearch,"search index=%")),1,true(),indexIsSpecified)\
| eval delayDoesNotApply=if((classic_search == 0),1,0) \
| rex field="qualifiedSearch" "^(search\\s+|)(\\[\\||)\\`(?<macro>.+?)(\\((?<macro_args>.+?)\\)|)\\`" \
| rex field="macro" mode=sed "s/\\(\\)//g" \
| eval macro=if(isnotnull(macro_args),(((macro . "(") . mvcount(split(macro_args,","))) . ")"),macro) \
| join type=outer macro\
    [| rest splunk_server=local /servicesNS/-/-/admin/macros \
    | fields + title, definition \
    | rename title as macro, definition as definition_alt] \
| eval macro=if((definition == "()"),null,definition) \
| eval qualifiedSearch=if(isnotnull(definition_alt),definition_alt,qualifiedSearch)\
| rex field="qualifiedSearch" "^(search\\s+|)eventtype\\=(?<eventtype>.+?)\\s" \
| rex field="eventtype" mode=sed "s/\"//g" \
| join type=outer eventtype\
    [| rest splunk_server=local /servicesNS/-/-/saved/eventtypes \
    | fields + title, search \
    | rename title as eventtype] \
| eval qualifiedSearch=if(isnotnull(eventtype),search,qualifiedSearch) \
| rex field="qualifiedSearch" "^(?:\s+|)(?<command>.+?)(?:\s|\=|\||$)"\
| lookup search_commands_lookup command OUTPUT classic_search\
| eval indexIsSpecified=if(classic_search=0,1,0)\
| eval indexIsSpecified=case(indexIsSpecified=0 AND like(qualifiedSearch,"search index=*%") OR like(qualifiedSearch,"search index=\"*%"),1,indexIsSpecified=0 AND (like(qualifiedSearch,"search index=%") OR like(qualifiedSearch,"index=%")),1,true(),indexIsSpecified)\
| eval delayDoesNotApply=if((classic_search == 0),1,0) \
| fields - definition definition_alt eventtype macro macro_args qualifiedSearch
iseval = 0

[maxConcurrentSavedSearches]
definition = appendcols\
    [| rest splunk_server="local" /services/server/info \
    | stats values(serverName) as host \
    | append \
        [ search earliest="-5m" index="_internal" sourcetype="splunkd" component="SHCMaster" \
        | stats values(peer) as host \
        | mvexpand host] \
    | stats dc(host) as sh_count \
    | appendcols \
        [| rest splunk_server=local /services/server/status/limits/search-concurrency \
        | fields max_hist_scheduled_searches] \
    | eval max_saved_search=max_hist_scheduled_searches*sh_count \
    | fields max_saved_search]\
| eventstats values(max_saved_search) as "max concurrent alerts" \
| fields - max_saved_search
iseval = 0
