[Notify admin for alerts to review]
display.page.search.mode = fast
cron_schedule = 13 1 * * *
action.sendresults_alert.param.showfooter = 0
request.ui_dispatch_view = search
action.email.include.results_link = 0
disabled = 0
alert.suppress = 0
action.email = 1
display.general.type = statistics
action.sendresults_alert.param.showemail = 0
action.sendresults_alert.param.showresults = 1
enableSched = 1
alert.track = 0
action.email.message.alert = There $result.grammar_1$ $result.count$ remaining $result.grammar_2$ to review.\
\
Go to Proper Alerts app to review $result.grammar_3$.
counttype = number of events
quantity = 0
action.email.include.view_link = 0
display.page.search.tab = statistics
description = Notify admin of remaining alert to review
action.sendresults_alert.param.showbody = 0
request.ui_dispatch_app = proper_alerts
relation = greater than
action.sendresults_alert.param.showsubj = 0
search = | inputlookup alerts_lookup\
| eval reviewed=if(updated>=dateLastReview,0,1)\
| search reviewed=0\
| stats dc(alert) as count \
| eval grammar_1=if(count>1,"are","is")\
| eval grammar_2=if(count>1,"alerts","alert")\
| eval grammar_3=if(count>1,"them","it")
dispatch.earliest_time = 0

[Notify alert recipient of a change]
display.page.search.mode = fast
cron_schedule = 7 * * * *
action.sendresults_alert.param.showfooter = 0
request.ui_dispatch_view = search
action.email.include.results_link = 0
disabled = 0
action.email = 1
action.email.inline = 1
action.sendresults_alert.param.showemail = 0
alert.digest_mode = 0
display.general.type = statistics
action.sendresults_alert.param.showresults = 1
enableSched = 1
alert.track = 0
action.email.message.alert = Your alert '$result.alert$' has been modified.\
\
Please find below what has changed - prefixed with new - within alert's main parameters.
counttype = number of events
action.email.sendresults = 1
quantity = 0
action.email.include.view_link = 0
display.page.search.tab = statistics
action.slack_webhook_alert.param.slack_webhook = test
action.slack_webhook_alert = 0
description = Notify alert recipient of any change made on his alert
alert.suppress = 0
action.sendresults_alert.param.showbody = 0
request.ui_dispatch_app = proper_alerts
relation = greater than
action.sendresults_alert.param.showsubj = 0
dispatch.earliest_time = 0
search = | rest splunk_server="local" /servicesNS/-/-/saved/searches search="disabled=0 is_scheduled=1" \
| fields title eai:acl.app eai:acl.owner updated cron_schedule dispatch.earliest_time dispatch.latest_time search action.email.to actions \
| rename eai:acl.app as app eai:acl.owner as owner title as alert action.email.to as email dispatch.* as * \
| eval updated=if(like(updated,"1970%"),0,round(strptime(updated,"%Y-%m-%dT%H:%M:%S%z"))) \
| eval md5=md5(alert+app+updated+cron_schedule+earliest_time+latest_time+search+email+actions+owner) \
| eval latest_time=if(latest_time="","now",latest_time)\
| rename * as new_* \
| rename new_alert as alert new_app as app \
| append \
    [| inputlookup alerts_lookup \
    | eval email=if(isnull(email),owner,email)] \
| stats values(*) as * by alert app \
| where NOT new_md5=md5 \
| fields alert app updated cron_schedule earliest_time latest_time email actions owner search new_* \
| fields - *md5* \
| eval changed_cron_schedule=if(new_cron_schedule!=cron_schedule,new_cron_schedule,null()) \
| eval changed_earliest_time=if(new_earliest_time!=earliest_time,new_earliest_time,null()) \
| eval changed_latest_time=if(new_latest_time!=latest_time,new_latest_time,null()) \
| eval changed_search=if(new_search!=search,new_search,null()) \
| eval changed_actions=if(new_actions!=actions,new_actions,null()) \
| eval changed_owner=if(new_owner!=owner,new_owner,null()) \
| eval changed_email=if(new_email!=email,new_email,null()) \
| rename new_updated as updated \
| fields alert app * \
| fields - new_* \
| convert ctime(updated) \
| rename updated as "modification date" cron_schedule as "cron schedule" changed_cron_schedule as "new cron schedule" changed_search as "new search" changed_earliest_time as "new earliest time" changed_latest_time as "new latest time" latest_time as "latest time" earliest_time as "earliest time" changed_actions as "new actions" changed_email as "new email" changed_owner as "new owner" \
| join app \
    [| rest splunk_server="local" /servicesNS/-/-/apps/local \
    | fields title label \
    | rename title as app label as app_label] \
| rename app_label as app \
| fields "modification date" alert app search "*search" "cron schedule" "*cron schedule" "earliest time" "*earliest time" "latest time" "*latest time" actions "*actions" email "*email to" owner "*owner"\
| rex field="email" "(?<valid_email>(?i)^[A-Za0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$)" \
| append\
    [| rest splunk_server="local" /servicesNS/-/-/saved/searches \
    | search title="Notify admin for alerts to review" \
    | fields action.email.to \
    | rename action.email.to as admin_email]\
| eventstats values(admin_email) as admin_email\
| eval email=if(isnull(valid_email),admin_email,email) \
| fields - valid_email admin_email\
| search alert="*"\
| foreach new* [eval <<FIELD>>=if(isnull('<<FIELD>>'),"N/A",'<<FIELD>>')]

[Update KV Store lookup]
display.page.search.mode = fast
alert.track = 0
cron_schedule = 25 * * * *
description = Update KV Store lookup with alerts changes or new alerts
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_view = search
search = | rest splunk_server="local" /servicesNS/-/-/saved/searches search="disabled=0 is_scheduled=1" \
| fields title eai:acl.app eai:acl.owner updated cron_schedule dispatch.earliest_time dispatch.latest_time search action.email.to qualifiedSearch actions description\
| `indexIsSpecified` \
| rename eai:acl.app as app eai:acl.owner as owner title as alert action.email.to as email dispatch.* as * \
| `getServiceRequest` \
| eval service_request=if(isnull(service_request),"N/A",service_request) \
| eval description=if(isnull(description),"N/A",description) \
| eval updated=if(like(updated,"1970%"),0,round(strptime(updated,"%Y-%m-%dT%H:%M:%S%z"))) \
| eval md5=md5(alert+app+updated+cron_schedule+earliest_time+latest_time+search+email+actions+owner), md5_search=md5(search) \
| croniter input="cron_schedule" iterations="2" \
| eval interval=tonumber(mvindex(croniter_return,1))-tonumber(mvindex(croniter_return,0)) \
| fields - croniter_return \
| eval earliest_epoch=relative_time(now(), earliest_time), latest_epoch=if(latest_time="now",now(),relative_time(now(), latest_time)), interval_search=round(latest_epoch-earliest_epoch,0)\
| eval searchPeriodIsAlignedWithSchedule=if(interval_search=interval OR classic_search=0,1,0)\
| fields - interval_search\
| rename * as new_* \
| rename new_alert as alert new_app as app \
| append \
    [ search index="_internal" sourcetype="scheduler" search_type="scheduled" \
        [| rest splunk_server="local" /servicesNS/-/-/server/info \
        | fields host \
        | append \
            [ search earliest="-5m" index="_internal" sourcetype="splunkd" component="SHCMaster" \
            | stats values(peer) as host \
            | mvexpand host] \
        | dedup host] \
    | stats max(run_time) as new_run_time by savedsearch_name app \
    | rename savedsearch_name as alert] \
| search new_cron_schedule="*" \
| append \
    [| inputlookup alerts_lookup] \
| stats values(*) as * by alert app \
| where NOT new_md5=md5 OR new_run_time>interval OR new_indexIsSpecified!=indexIsSpecified AND isnotnull(md5_search) \
| eval searchIsCorrectlyStructured=if(new_md5_search!=md5_search,0,searchIsCorrectlyStructured) \
| eval dataSourceExist=if(new_md5_search!=md5_search,0,dataSourceExist) \
| rename new_* as * \
| eval runtimeIsLowerThanInterval=if(run_time>interval,0,1) \
| eval latest_time=if(isnull(latest_time),"now",latest_time) \
| eval scheduleHasAtLeastOneMinuteDelay=if(latest_time="now" AND delayDoesNotApply=0,0,1) \
| fields - delayDoesNotApply \
| eval hasServiceRequest=if(isnull(service_request) OR service_request="N/A",0,1) \
| eval dateLastReview=if(isnull(dateLastReview),0,dateLastReview) \
| eval searchIsCorrectlyStructured=if(isnull(searchIsCorrectlyStructured),0,searchIsCorrectlyStructured)  \
| eval dataSourceExist=if(isnull(dataSourceExist),0,dataSourceExist) \
| join app \
    [| rest splunk_server="local" /servicesNS/-/-/apps/local \
    | fields title label \
    | rename title as app label as app_label] \
| lookup alerts_lookup alert app OUTPUT _key \
| outputlookup append=true alerts_lookup

[Clean KV Store lookup]
display.page.search.mode = fast
alert.track = 0
cron_schedule = 20 * * * *
description = Remove disabled or deleted alerts from KV Store lookup
dispatch.earliest_time = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = proper_alerts
request.ui_dispatch_view = search
search = | inputlookup alerts_lookup \
| eval source="kv_store" \
| append \
    [| rest splunk_server="local" /servicesNS/-/-/saved/searches search="disabled=0 is_scheduled=1" \
    | fields title eai:acl.app \
    | rename eai:acl.app as app title as alert \
    | eval source="rest"] \
| stats values(*) as * by alert app \
| eval source_count=mvcount(source) \
| search NOT source_count=1 \
| fields - source source_count\
| outputlookup alerts_lookup
